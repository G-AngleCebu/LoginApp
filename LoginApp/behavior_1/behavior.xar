<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="70.7107">
                        <Box name="Set Language" id="2" localization="8" tooltip="Select the language you would like the robot to speak and understand. Any following call to&#x0A;ALSpeechRecognition (Speech Reco. box for instance) or ALTextToSpeech (Say box&#x0A;for instance) will use this language." x="50" y="0">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                            <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                            <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" />
                            <Parameter name="Language" inherits_from_parent="0" content_type="3" value="English" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5">
                                <Choice value="Arabic" />
                                <Choice value="Brazilian" />
                                <Choice value="Chinese" />
                                <Choice value="Czech" />
                                <Choice value="Danish" />
                                <Choice value="Dutch" />
                                <Choice value="English" />
                                <Choice value="Finnish" />
                                <Choice value="French" />
                                <Choice value="German" />
                                <Choice value="Italian" />
                                <Choice value="Japanese" />
                                <Choice value="Korean" />
                                <Choice value="Polish" />
                                <Choice value="Portuguese" />
                                <Choice value="Russian" />
                                <Choice value="Spanish" />
                                <Choice value="Swedish" />
                                <Choice value="Turkish" />
                            </Parameter>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Identify User" id="1" localization="8" tooltip="" x="337" y="20">
                            <dialogFile>../HelloWorld/HelloWorld.dlg</dialogFile>
                            <bitmap>media/images/box/box-dialog.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="usr_id" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        </Box>
                        <Box name="Verify Identity" id="3" localization="8" tooltip="" x="348" y="172">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import webbrowser
import os
import sys
from mysql.connector import (connection)
from mysql.connector import errorcode
import time

class MyClass(GeneratedClass):
    def __init__(self):
        self.tts = ALProxy("ALTextToSpeech")
        GeneratedClass.__init__(self)

    def onInput_onStart(self):
        try:
            self.passUserInfo()
        except:
            self.tts.say("You don't seem to be an Employee here.")
            self.onError()
        pass

    def read_database(self):
        '''Read from the Databse'''
        try:
            cnx = connection.MySQLConnection(user=str(self.getParameter("User")),
                                             password=str(self.getParameter("Password")),
                                             host=str(self.getParameter("Host")),
                                             database=str(self.getParameter("Database")))
            self.tts.say("SUCCESS: Connected to the database")
        except:
            self.tts.say("ERROR: Failed to connect to the database")
        else:
            self.userFullName = ""
            self.userPassword = ""
            self.status = -1
            cursor = cnx.cursor()
            SELECT = self.getParameter("Select")
            FROM = self.getParameter("Table")
            #WHERE = self.getParameter("Where")
            WHERE = 'WHERE id = '+str(self.getParameter("usr_id"))
            query = (SELECT+" "+FROM+" "+WHERE)
            cursor.execute(query)

            if '*' in SELECT or ('id' in SELECT and 'f_name' in SELECT and 'm_name' in SELECT and 'l_name' in SELECT and 'password' in SELECT and 'flag' in SELECT):
                for (id,f_name,m_name,l_name,password,flag) in cursor:
                    pass

            self.userFullName = f_name+" "+m_name+" "+l_name
            self.userPassword = password

            logInStatus = flag

            if flag is 0:
                self.status = "log you in"
                logInStatus = 1
            else:
                self.status = "log you out"
                logInStatus = 0

            logInOutQuery = ("UPDATE "+FROM.replace("FROM ","").replace(" ","")+" SET flag = "+str(logInStatus)+" WHERE id = "+str(id))
            cursor.execute(logInOutQuery)
            self.tts.say(str(f_name)+", I will "+self.status)

            cursor.close()
            cnx.close()

    def passUserInfo(self):
        ''' get employee's database information'''
        self.read_database()
        self.passName(str(self.userFullName))
        self.passPassword(str(self.userPassword))
        time.sleep(1)
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Output name="onError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="passName" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                            <Output name="passPassword" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                            <Parameter name="User" inherits_from_parent="0" content_type="3" value="temp" default_value="temp" custom_choice="0" tooltip="" id="8" />
                            <Parameter name="Password" inherits_from_parent="0" content_type="3" value="g67r0tw3qb" default_value="g67r0tw3qb" custom_choice="0" password="1" tooltip="" id="9" />
                            <Parameter name="Host" inherits_from_parent="0" content_type="3" value="153.121.39.201" default_value="153.121.39.201" custom_choice="0" tooltip="" id="10" />
                            <Parameter name="Database" inherits_from_parent="0" content_type="3" value="pepperdb" default_value="pepperdb" custom_choice="0" tooltip="" id="11" />
                            <Parameter name="Select" inherits_from_parent="0" content_type="3" value="SELECT *" default_value="SELECT *" custom_choice="0" tooltip="" id="12" />
                            <Parameter name="Table" inherits_from_parent="0" content_type="3" value="FROM pepper_test" default_value="FROM pepper_test" custom_choice="0" tooltip="" id="13" />
                            <Parameter name="usr_id" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="14" />
                        </Box>
                        <Box name="clockInOut" id="4" localization="8" tooltip="" x="520" y="175">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
import time

loginPage = "http://www.opentimeclock.com/free.html"

projectName = "LoginApp"
filePathInProject = "chromedriver"

for dirName, subdirList, fileList in os.walk(os.path.expanduser("~")):
    if projectName in subdirList:
        chromedriver = str(dirName)+"/"+str(projectName)+"/"+str(filePathInProject)

browser = webdriver.Chrome(chromedriver)
'''browser = webdriver.PhantomJS()
browser.set_window_size(11250, 550)'''
browser.get(loginPage)

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

        self.tts = ALProxy('ALTextToSpeech')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        uname = self.getParameter("USERNAME")
        pword = self.getParameter("PASSWORD")

        self.login(uname, pword)
        self.attendance()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box


    def login(self, uname, pword):

        username1 = browser.find_element_by_id('txtUser')
        username1.send_keys(str(uname))

        password1 = browser.find_element_by_id('txtPassword')
        password1.send_keys(str(pword))

        time.sleep(2)

    def attendance(self):
        clockInOut = browser.find_element_by_id('btnClock')
        if clockInOut.text == "CLOCK IN":
                clockInOut.click()
                try:
                    WebDriverWait(browser, 2).until(EC.visibility_of_element_located((By.ID, 'dialogBody')))
                    self.tts.say("Username or password not matching.")
                    browser.find_element_by_id('dialogOK').click()
                except:
                    timeIn = browser.find_element_by_id('lblCurrentTime').text
                    self.tts.say("Time logged in: " + str(timeIn))
                    self.onStopped()

        elif clockInOut.text == "CLOCK OUT":
            clockInOut.click()
            try:
                WebDriverWait(browser, 2).until(EC.visibility_of_element_located((By.ID, 'dialogBody')))
                self.tts.say("Username or password not matching.")
                browser.find_element_by_id('dialogOK').click()
            except:
                timeIn = browser.find_element_by_id('lblCurrentTime').text
                self.tts.say("Time logged out: " + str(timeIn))
                self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Parameter name="USERNAME" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                            <Parameter name="PASSWORD" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="6" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="3" indexofinput="14" outputowner="1" indexofoutput="5" />
                        <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="5" />
                        <Link inputowner="4" indexofinput="5" outputowner="3" indexofoutput="6" />
                        <Link inputowner="4" indexofinput="6" outputowner="3" indexofoutput="7" />
                        <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
